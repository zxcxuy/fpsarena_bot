import telebot
from telebot import types
from database import Database
import config
import sys

bot = telebot.TeleBot(config.TOKENS["main"])
db = Database()

USER_STATE = {}

@bot.message_handler(commands=["start"])
def start(message):
    user = message.from_user
    firstname = user.first_name
    db.add_user(
        chat_id=message.chat.id,
        username=user.username,
        first_name=firstname,
        last_name=user.last_name,
    )
    try:
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç {firstname}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *FPS ARENA*\U0001f3ae \n*–¢—ã –ø–æ–ø–∞–ª –≤ —Ç–æ —Å–∞–º–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞–µ–¥–∏–Ω–µ —Å –∏–≥—Ä–æ–π —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n–ù–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: https://t.me/fpsarenamsk",
            reply_markup=markuping(message.chat.id),
            parse_mode="Markdown",
        )
    except:
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *FPS ARENA*\U0001f3ae \n*–¢—ã –ø–æ–ø–∞–ª –≤ —Ç–æ —Å–∞–º–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞–µ–¥–∏–Ω–µ —Å –∏–≥—Ä–æ–π —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n–ù–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: https://t.me/fpsarenamsk",
            reply_markup=markuping(message.chat.id),
            parse_mode="Markdown",
        )
    bot.send_message(
        message.chat.id,
        "\U0001f514 –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.",
    )

@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if message.chat.id not in config.admins:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    show_admin_menu(message.chat.id)

def show_admin_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    btn1 = types.KeyboardButton("1Ô∏è‚É£")
    btn2 = types.KeyboardButton("2Ô∏è‚É£")
    btn3 = types.KeyboardButton("3Ô∏è‚É£")
    btn4 = types.KeyboardButton("4Ô∏è‚É£")
    markup.add(btn1, btn2, btn3, btn4)

    menu_text = "üë®‚Äçüíª *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å FPS ARENA*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1Ô∏è‚É£ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n2Ô∏è‚É£ *–†–∞—Å—Å—ã–ª–∫–∞* - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º\n3Ô∏è‚É£ *–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É\n4Ô∏è‚É£ *–ù–∞–∑–∞–¥* - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

    bot.send_message(chat_id, menu_text, reply_markup=markup, parse_mode="Markdown")
    USER_STATE[chat_id] = "admin_menu"

@bot.message_handler(
    func=lambda message: message.text in ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"]
    and message.chat.id in config.admins
    and USER_STATE.get(message.chat.id) == "admin_menu"
)
def handle_admin_choice(message):
    chat_id = message.chat.id

    if message.text == "1Ô∏è‚É£":
        show_statistics(chat_id)
    elif message.text == "2Ô∏è‚É£":
        start_broadcast(chat_id)
    elif message.text == "3Ô∏è‚É£":
        show_broadcast_history(chat_id)
    elif message.text == "4Ô∏è‚É£":
        return_to_main(chat_id)

def show_statistics(chat_id):
    users_count = db.get_user_count()
    notify_users = db.get_user_notify_count()
    stats = f"*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {users_count}\n*–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:* {notify_users}\n*–û—Ö–≤–∞—Ç:* {(notify_users/users_count*100 if users_count > 0 else 0):.1f}%"

    bot.send_message(chat_id, stats, parse_mode="Markdown")
    show_admin_menu(chat_id)

def show_broadcast_history(chat_id):
    try:
        history = db.get_last_broadcast_content(limit=1)
        
        if not history:
            bot.send_message(chat_id, "üìù –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞")
            return
        
        item = history[0]
        history_text = "üìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n\n"
        history_text += f"üìÖ {item['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        history_text += f"üì¶ –¢–∏–ø: {item['content_type']}\n"
        if item['content_type'] == 'photo_text' and item['file_id']:
            history_text += f"üñºÔ∏è –ï—Å—Ç—å —Ñ–æ—Ç–æ\n"
        if item['content_text']:
            text_preview = item['content_text'][:100] + "..." if len(item['content_text']) > 100 else item['content_text']
            history_text += f"üìù –¢–µ–∫—Å—Ç: {text_preview}\n"
        
        history_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        if item['file_id']:
            try:
                bot.send_photo(
                    chat_id, 
                    item['file_id'], 
                    caption=history_text, 
                    parse_mode="Markdown"
                )
            except:
                bot.send_message(chat_id, history_text + "\nüñºÔ∏è (–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
        else:
            bot.send_message(chat_id, history_text)
        
        show_admin_menu(chat_id)    
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        show_admin_menu(chat_id)

def start_broadcast(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_text = types.KeyboardButton("üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
    btn_photo = types.KeyboardButton("üñºÔ∏è –¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ")
    btn_cancel = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    markup.add(btn_text, btn_photo, btn_cancel)

    bot.send_message(
        chat_id,
        "üì¢ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n‚Ä¢ üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n‚Ä¢ üñºÔ∏è –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ",
        reply_markup=markup,
        parse_mode="Markdown",
    )
    USER_STATE[chat_id] = "choose_broadcast_type"

def return_to_main(chat_id):
    if chat_id in USER_STATE:
        del USER_STATE[chat_id]
    bot.send_message(
        chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=markuping(chat_id)
    )

@bot.message_handler(
    func=lambda message: USER_STATE.get(message.chat.id) == "choose_broadcast_type"
    and message.chat.id in config.admins
)
def handle_broadcast_type(message):
    chat_id = message.chat.id

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        del USER_STATE[chat_id]
        show_admin_menu(chat_id)
        return

    if message.text == "üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç":
        bot.send_message(
            chat_id,
            markdown_help,
            parse_mode="Markdown",
        )
        bot.send_message(
            chat_id,
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=types.ForceReply(selective=True),
        )
        USER_STATE[chat_id] = "awaiting_text_broadcast"

    elif message.text == "üñºÔ∏è –¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ":
        bot.send_message(
            chat_id,
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=types.ForceReply(selective=True),
        )
        USER_STATE[chat_id] = "awaiting_photo_broadcast"

@bot.message_handler(
    func=lambda message: USER_STATE.get(message.chat.id) == "awaiting_text_broadcast"
    and message.chat.id in config.admins,
    content_types=["text"],
)
def process_text_broadcast(message):
    chat_id = message.chat.id
    broadcast_text = message.text

    USER_STATE[chat_id] = {
        "type": "text",
        "text": broadcast_text,
        "state": "confirm_broadcast",
    }

    show_broadcast_confirmation(chat_id)

@bot.message_handler(
    func=lambda message: USER_STATE.get(message.chat.id) == "awaiting_photo_broadcast"
    and message.chat.id in config.admins,
    content_types=["photo"],
)
def process_photo_broadcast(message):
    chat_id = message.chat.id
    photo_id = message.photo[-1].file_id

    USER_STATE[chat_id] = {
        "type": "photo",
        "photo_id": photo_id,
        "state": "awaiting_photo_text",
    }

    bot.send_message(
        chat_id,
        markdown_help,
        parse_mode="Markdown",
    )
    bot.send_message(
        chat_id,
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ:",
        reply_markup=types.ForceReply(selective=True),
    )

@bot.message_handler(
    func=lambda message: isinstance(USER_STATE.get(message.chat.id), dict)
    and USER_STATE.get(message.chat.id).get("state") == "awaiting_photo_text"
    and message.chat.id in config.admins,
    content_types=["text"],
)
def process_photo_text(message):
    chat_id = message.chat.id
    broadcast_text = message.text

    USER_STATE[chat_id]["text"] = broadcast_text
    USER_STATE[chat_id]["state"] = "confirm_broadcast"

    show_broadcast_confirmation(chat_id)

def show_broadcast_confirmation(chat_id):
    broadcast_data = USER_STATE[chat_id]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_confirm = types.KeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    btn_cancel = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    markup.add(btn_confirm, btn_cancel)

    if broadcast_data["type"] == "photo":
        try:
            bot.send_photo(
                chat_id,
                broadcast_data["photo_id"],
                caption=broadcast_data["text"] + "\n\n\n*–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏*",
                parse_mode="Markdown",
                reply_markup=markup,
            )
        except:
            bot.send_photo(
                chat_id,
                broadcast_data["photo_id"],
                caption=broadcast_data["text"] + "\n\n\n–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏",
                reply_markup=markup,
            )
            bot.send_message(chat_id, "*Markdown* –æ—Ç–∫–ª—é—á–µ–Ω", parse_mode="Markdown")
    else:
        try:
            bot.send_message(
                chat_id,
                broadcast_data["text"] + "\n\n\n*–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏*",
                parse_mode="Markdown",
                reply_markup=markup,
            )
        except:
            bot.send_message(
                chat_id,
                broadcast_data["text"] + "\n\n\n–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏",
                reply_markup=markup,
            )
            bot.send_message(chat_id, "*Markdown* –æ—Ç–∫–ª—é—á–µ–Ω", parse_mode="Markdown")

@bot.message_handler(
    func=lambda message: isinstance(USER_STATE.get(message.chat.id), dict)
    and USER_STATE.get(message.chat.id).get("state") == "confirm_broadcast"
    and message.chat.id in config.admins
)
def confirm_broadcast(message):
    chat_id = message.chat.id
    broadcast_data = USER_STATE[chat_id]

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        del USER_STATE[chat_id]
        show_admin_menu(chat_id)
        return

    if message.text == "‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        bot.send_message(chat_id, "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        send_broadcast(chat_id, broadcast_data)
    else:
        show_broadcast_confirmation(chat_id)

def send_broadcast(admin_chat_id, broadcast_data):
    try:
        # content_id = db.save_broadcast_content(
        #     content_text=broadcast_data.get('text'),
        #     file_id=broadcast_data.get('photo_id')
        # )

        users = db.get_users_notify()
        # users = [{'chat_id':1291104485}]

        success_count = 0
        fail_count = 0

        for user in users:
            try:
                if broadcast_data["type"] == "text":
                    try:
                        bot.send_message(
                            user["chat_id"],
                            broadcast_data["text"],
                            parse_mode="Markdown"
                        )
                    except:
                        bot.send_message(user["chat_id"], broadcast_data["text"])
                else:
                    try:
                        bot.send_photo(
                            user["chat_id"],
                            broadcast_data["photo_id"],
                            caption=broadcast_data["text"],
                            parse_mode="Markdown"
                        )
                    except:
                        bot.send_photo(
                            user["chat_id"],
                            broadcast_data["photo_id"],
                            caption=broadcast_data["text"]
                        )

                success_count += 1

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['chat_id']}: {e}")
                fail_count += 1

        report = f"""
‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ: {success_count}
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}
üìä –í—Å–µ–≥–æ: {success_count + fail_count}
"""
        bot.send_message(admin_chat_id, report, parse_mode="Markdown")

    except Exception as e:
        bot.send_message(admin_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

    finally:
        if admin_chat_id in USER_STATE:
            del USER_STATE[admin_chat_id]
        show_admin_menu(admin_chat_id)

@bot.message_handler(func=lambda message: True)
def main_handler(message):
    chat_id = message.chat.id
    user = message.from_user

    db.add_user(
        chat_id=chat_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )

    if message.text == "\U0001f4b3 –ü—Ä–∞–π—Å—ã":
        bot.send_photo(
            chat_id,
            photo="https://i.postimg.cc/CxpxM7sw-/price.jpg",
            caption="\U0001f310 *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* @fpsarena\n\U0001f4f2 *–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –º–µ—Å—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø–∏—à–∏ –∞–¥–º–∏–Ω—É!*",
            parse_mode="Markdown",
        )
    elif message.text == "\U0001f4c5 –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å":
        bot.send_message(
            chat_id,
            "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å \U0001f449 https://t.me/fpsarena",
        )
    elif message.text == "\U00002b50 –ê–∫—Ü–∏—è":
        bot.send_photo(
            chat_id,
            photo="https://i.postimg.cc/HkWtMn1x/prom.jpg",
            caption="""
*–ü—Ä–∏–≤–µ—Ç*ü§†

üçÅ–í –ø—Ä–µ–¥–¥–≤–µ—Ä–∏–∏ –æ—Å–µ–Ω–∏ —Ä–∞–¥—É–µ–º –≤–∞—Å –Ω–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!üçÅ

*5 —á–∞—Å–æ–≤ —Å FPS ARENA ‚Äî—ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –∞ 5+1 –µ—â–µ –ª—É—á—à–µ*üíØ
–ü–ª–∞—Ç–∏ –∑–∞ 5 —á–∞—Å–æ–≤ ‚Äî *–∏–≥—Ä–∞–π –Ω–∞ —á–∞—Å –±–æ–ª—å—à–µ*üò≤

üí•–ü–æ–±–µ–¥–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è!üí• –ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å 1 –ø–æ 30 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞.
""",
            parse_mode="Markdown",
        )
    elif message.text == "\U0001f514 –≤–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É":
        new_status = db.toggle_user_notify(chat_id)

        if new_status is not None:
            if new_status:
                bot.send_message(
                    chat_id,
                    "‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!*\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏—è—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö FPS ARENA!",
                    parse_mode="Markdown",
                )
            else:
                bot.send_message(
                    chat_id,
                    "‚ùå *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞–∫—Ü–∏—è—Ö.",
                    parse_mode="Markdown",
                )
        else:
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
            )
    else:
        bot.send_message(
            chat_id,
            "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U0001f47b\n(–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)",
            reply_markup=markuping(chat_id),
        )
        if USER_STATE:
            del USER_STATE[chat_id]

def markuping(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("\U0001f4b3 –ü—Ä–∞–π—Å—ã")
    btn2 = types.KeyboardButton("\U0001f4c5 –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
    btn3 = types.KeyboardButton("\U00002b50 –ê–∫—Ü–∏—è")
    btn4 = types.KeyboardButton("\U0001f514 –≤–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    markup.add(btn2, btn1, btn3, btn4)
    if chat_id in config.admins:
        admin_btn = types.KeyboardButton("/admin")
        markup.add(admin_btn)
    return markup

markdown_help = r"""
üìù *–ü–û–î–°–ö–ê–ó–ö–ê –ü–û –†–ê–ó–ú–ï–¢–ö–ï:*

*–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* - \*—Ç–µ–∫—Å—Ç\*
_–ö—É—Ä—Å–∏–≤_ - \_—Ç–µ–∫—Å—Ç\_
`–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π` - \`—Ç–µ–∫—Å—Ç\`
[–°—Å—ã–ª–∫–∞](https://example.com) - \[—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ó–∞–∫—Ä—ã–≤–∞–π—Ç–µ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!
"""

def shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        db.close()
        print("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        shutdown()